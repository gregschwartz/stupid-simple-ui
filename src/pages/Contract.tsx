import * as React from "react";
import { useParams } from "react-router-dom";
import { FormEvent, useState } from 'react';
import { ethers } from "ethers";
import { useMutation, useQuery } from "../convex/_generated/react";

// function Field({ name: string, type: string, internalType: string }) {
//   let options = {};
//   let htmlType = "text";
//
//   if(type=="uint256") {htmlType = "number";}
//
//   if(type=="address") {
//     options["minlength"]=42
//     options["maxlength"]=42
//   }
//
//   return <div className='formInput'>
//     {/* {options.map((k) => {
//       return (k);
//     })} */}
//     <input
//       type={htmlType}
//       name={name ? name : type}
//       className={name ? name : type}
//       required
//       value="hi"
//     />
//   </div>; 
// }

//prevent error: Property 'ethereum' does not exist on type Window 
declare global {
  interface Window{
    ethereum?:any
  }
}


export default function Contract() {
  const { chain, contractAddress } = useParams();
  const [address, setAddress] = useState();

  // const incrementNumViews = useMutation("contracts:incrementNumViews");
  const result = useQuery("contracts:getBy", chain, contractAddress);

  if(!result || result.length === 0) {
    return (
      <div>
        <h1>Error, contract not found</h1>
        <h3>
          Sorry, no one has made a UI for that contract. If you're the developer,{" "}
          <a href={`/?chain=${chain}&contractAddress=${contractAddress}`}>go create it!</a>
        </h3>
        <h6>
          Chain: {chain}<br />
          Address: {contractAddress}
        </h6>
      </div>
    );
  }

  //TODO: add support for an ID in the URL, and then use that one instead!
  const record = result[0];
  const abi = JSON.parse(record.contractAbi);
  const contractName = record.name;

  //connect to contract
  let provider = ethers.getDefaultProvider(process.env.REACT_APP_ALCHEMY_URL, {"alchemy": process.env.REACT_APP_ALCHEMY_API_KEY});
  let contract = new ethers.Contract(contractAddress, abi.abi, provider);
  // console.log("contract", contract);
  
  const connectWallet = async () => {
    const provider = new ethers.BrowserProvider(window.ethereum, "any");
    await provider.send("eth_requestAccounts", []);
    const signer = await provider.getSigner();
    console.log("Account:", await signer.getAddress());
    contract.connect(signer);
    console.log("connected with that account");
  };

  function showResult(form: HTMLFormElement, message: string) {
    let responseCells = form.getElementsByClassName("responseCell");
    if(responseCells.length > 0) {
      let cell = responseCells[0] as HTMLDivElement;
      cell.innerHTML = message;
    } else {
      alert("Cannot find where to show result, which is: " + message);
    }
  }

  const handleSubmit = async (event: FormEvent) => {
    // Stop the form from submitting and refreshing the page.
    event.preventDefault();
    

    const form = event.target as HTMLFormElement;
    console.log("call contract's method: ", form.name);

    //future, this won't work with SELECTs nor radio buttons...
    let params:String[] = [];
    const inputs = form.getElementsByTagName("input");
    for(let i=0; i<inputs.length; i++) {
      params.push( inputs[i].value );
    }
    console.log("with these parameters", params);

    try {
      let result = await contract[`${form.name}`](...params);
      console.log("result", result);
      showResult(form, result);
    } catch(x) {
      console.log("caught", x);

      let reason = "";

      if(x.reason === "sending a transaction requires a signer") {
        reason = "Please click Connect Wallet at the top of the screen.";
      } else {
        reason = (x.reason !== undefined ? x.reason : (
          x.message !== undefined ? x.message : x
        ))
      }

      showResult(form, reason);
    }

  }

  //removed becaues it just counts up endlessly
  // incrementNumViews(record._id);

  return (
    <div>
      <h1>{contractName}</h1>
      <div className='container'>
        <div className='header'>
          {/* {record.numViews} views <br /> */}
          <button id="connectWallet" onClick={connectWallet}>Connect Wallet</button>
        </div>

        <div className='formSection'>
          {abi.abi.map((functionOrObject) => {
            if (!functionOrObject.name || functionOrObject.type==="event") { return ""; }
      
            return (
              <form onSubmit={handleSubmit} className='solidityForm' name={functionOrObject.name} key={functionOrObject.name}>
                <h2 style={{"color":"Black"}}>{functionOrObject.name}</h2>

                {(functionOrObject.stateMutability === "payable" ? (
                  <div className='addressSection formRow'>
                    <div className='formLabel'>
                      <label htmlFor="contractAddres">boldAmount</label> 
                    </div>
                    {/* <Field name="Amount" type="uint256" internalType="uint256" /> */}
                    <input type="number" id="amount" name="amount" className='amount' required />   
                  </div>
                ) : "")}

                {functionOrObject.inputs.map((input) => {
                  return (
                    <div className='addressSection formRow' key={input.name}>
                      <div className='formLabel'>
                        <label htmlFor="contractAddres">{input.name}</label> 
                      </div>
                      <div className='formInput'>
                        <input type="text" id="contractAddres" name="contractAddres" className='contractAddress' required />   
                      </div>                                          
                    </div>
                  );
                })}

                <div className='formRow'>
                  <div className='formLabel'>
                    <></>
                  </div>
                  <div className='formInput'>
                    <button type="submit" className='submit'>Submit</button>
                  </div>
                </div>
                
                {functionOrObject.outputs.map((output) => {
                  return ( 
                    <div className='formRow response' key={output.type}>
                      <div className='formLabel'>
                        <></>
                      </div>
                      <div className='formInput responseCell'>
                        {output.name ? output.name : "Returns"}: {output.type}
                      </div>
                    </div>
                  );
                })}
              </form>
            );
          })}
        </div>
      </div>
    </div>
  );
}


/*
  const guestBookAbiAsString = `{
    "_format": "hh-sol-artifact-1",
    "contractName": "GuestBook",
    "sourceName": "contracts/GuestBook.sol",
    "abi": [
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "message",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "NewEntryAdded",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_message",
            "type": "string"
          }
        ],
        "name": "addEntry",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "entries",
        "outputs": [
          {
            "internalType": "string",
            "name": "message",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getEntries",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "message",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "timestamp",
                "type": "uint256"
              }
            ],
            "internalType": "struct GuestBook.Entry[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "bytecode": "0x60806040523480156200001157600080fd5b50600060405180606001604052806040518060400160405280601081526020017f5468652067656e6573697320706f73740000000000000000000000000000000081525081526020013373ffffffffffffffffffffffffffffffffffffffff1681526020014281525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000019081620000ba91906200038e565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155505062000475565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200019657607f821691505b602082108103620001ac57620001ab6200014e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001d7565b620002228683620001d7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200026f6200026962000263846200023a565b62000244565b6200023a565b9050919050565b6000819050919050565b6200028b836200024e565b620002a36200029a8262000276565b848454620001e4565b825550505050565b600090565b620002ba620002ab565b620002c781848462000280565b505050565b5b81811015620002ef57620002e3600082620002b0565b600181019050620002cd565b5050565b601f8211156200033e576200030881620001b2565b6200031384620001c7565b8101602085101562000323578190505b6200033b6200033285620001c7565b830182620002cc565b50505b505050565b600082821c905092915050565b6000620003636000198460080262000343565b1980831691505092915050565b60006200037e838362000350565b9150826002028217905092915050565b620003998262000114565b67ffffffffffffffff811115620003b557620003b46200011f565b5b620003c182546200017d565b620003ce828285620002f3565b600060209050601f831160018114620004065760008415620003f1578287015190505b620003fd858262000370565b8655506200046d565b601f1984166200041686620001b2565b60005b82811015620004405784890151825560018201915060208501945060208101905062000419565b868310156200046057848901516200045c601f89168262000350565b8355505b6001600288020188555050505b505050505050565b610bab80620004856000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806317be85c31461004657806317ce42bd14610064578063b30906d414610080575b600080fd5b61004e6100b2565b60405161005b91906105e4565b60405180910390f35b61007e6004803603810190610079919061074f565b610203565b005b61009a600480360381019061009591906107c4565b610306565b6040516100a993929190610859565b60405180910390f35b60606000805480602002602001604051908101604052809291908181526020016000905b828210156101fa5783829060005260206000209060030201604051806060016040529081600082018054610109906108c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610135906108c6565b80156101825780601f1061015757610100808354040283529160200191610182565b820191906000526020600020905b81548152906001019060200180831161016557829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481525050815260200190600101906100d6565b50505050905090565b600060405180606001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff16815260200142815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190816102749190610aa3565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015550507fbcd9f27f44c6e501e03c10f091c3daf5af91bd7935a3af2a5218c076a23f551c8133426040516102fb93929190610859565b60405180910390a150565b6000818154811061031657600080fd5b9060005260206000209060030201600091509050806000018054610339906108c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610365906108c6565b80156103b25780601f10610387576101008083540402835291602001916103b2565b820191906000526020600020905b81548152906001019060200180831161039557829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905083565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561044e578082015181840152602081019050610433565b60008484015250505050565b6000601f19601f8301169050919050565b600061047682610414565b610480818561041f565b9350610490818560208601610430565b6104998161045a565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104cf826104a4565b9050919050565b6104df816104c4565b82525050565b6000819050919050565b6104f8816104e5565b82525050565b6000606083016000830151848203600086015261051b828261046b565b915050602083015161053060208601826104d6565b50604083015161054360408601826104ef565b508091505092915050565b600061055a83836104fe565b905092915050565b6000602082019050919050565b600061057a826103e8565b61058481856103f3565b93508360208202850161059685610404565b8060005b858110156105d257848403895281516105b3858261054e565b94506105be83610562565b925060208a0199505060018101905061059a565b50829750879550505050505092915050565b600060208201905081810360008301526105fe818461056f565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61065c8261045a565b810181811067ffffffffffffffff8211171561067b5761067a610624565b5b80604052505050565b600061068e610606565b905061069a8282610653565b919050565b600067ffffffffffffffff8211156106ba576106b9610624565b5b6106c38261045a565b9050602081019050919050565b82818337600083830152505050565b60006106f26106ed8461069f565b610684565b90508281526020810184848401111561070e5761070d61061f565b5b6107198482856106d0565b509392505050565b600082601f8301126107365761073561061a565b5b81356107468482602086016106df565b91505092915050565b60006020828403121561076557610764610610565b5b600082013567ffffffffffffffff81111561078357610782610615565b5b61078f84828501610721565b91505092915050565b6107a1816104e5565b81146107ac57600080fd5b50565b6000813590506107be81610798565b92915050565b6000602082840312156107da576107d9610610565b5b60006107e8848285016107af565b91505092915050565b600082825260208201905092915050565b600061080d82610414565b61081781856107f1565b9350610827818560208601610430565b6108308161045a565b840191505092915050565b610844816104c4565b82525050565b610853816104e5565b82525050565b600060608201905081810360008301526108738186610802565b9050610882602083018561083b565b61088f604083018461084a565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806108de57607f821691505b6020821081036108f1576108f0610897565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026109597fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261091c565b610963868361091c565b95508019841693508086168417925050509392505050565b6000819050919050565b60006109a061099b610996846104e5565b61097b565b6104e5565b9050919050565b6000819050919050565b6109ba83610985565b6109ce6109c6826109a7565b848454610929565b825550505050565b600090565b6109e36109d6565b6109ee8184846109b1565b505050565b5b81811015610a1257610a076000826109db565b6001810190506109f4565b5050565b601f821115610a5757610a28816108f7565b610a318461090c565b81016020851015610a40578190505b610a54610a4c8561090c565b8301826109f3565b50505b505050565b600082821c905092915050565b6000610a7a60001984600802610a5c565b1980831691505092915050565b6000610a938383610a69565b9150826002028217905092915050565b610aac82610414565b67ffffffffffffffff811115610ac557610ac4610624565b5b610acf82546108c6565b610ada828285610a16565b600060209050601f831160018114610b0d5760008415610afb578287015190505b610b058582610a87565b865550610b6d565b601f198416610b1b866108f7565b60005b82811015610b4357848901518255600182019150602085019450602081019050610b1e565b86831015610b605784890151610b5c601f891682610a69565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220bfbbcebc9c62c57aaa2dffd402801c95b3cd40da69bc0fd88874f4024bbd508164736f6c63430008110033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806317be85c31461004657806317ce42bd14610064578063b30906d414610080575b600080fd5b61004e6100b2565b60405161005b91906105e4565b60405180910390f35b61007e6004803603810190610079919061074f565b610203565b005b61009a600480360381019061009591906107c4565b610306565b6040516100a993929190610859565b60405180910390f35b60606000805480602002602001604051908101604052809291908181526020016000905b828210156101fa5783829060005260206000209060030201604051806060016040529081600082018054610109906108c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610135906108c6565b80156101825780601f1061015757610100808354040283529160200191610182565b820191906000526020600020905b81548152906001019060200180831161016557829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481525050815260200190600101906100d6565b50505050905090565b600060405180606001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff16815260200142815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190816102749190610aa3565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015550507fbcd9f27f44c6e501e03c10f091c3daf5af91bd7935a3af2a5218c076a23f551c8133426040516102fb93929190610859565b60405180910390a150565b6000818154811061031657600080fd5b9060005260206000209060030201600091509050806000018054610339906108c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610365906108c6565b80156103b25780601f10610387576101008083540402835291602001916103b2565b820191906000526020600020905b81548152906001019060200180831161039557829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905083565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561044e578082015181840152602081019050610433565b60008484015250505050565b6000601f19601f8301169050919050565b600061047682610414565b610480818561041f565b9350610490818560208601610430565b6104998161045a565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104cf826104a4565b9050919050565b6104df816104c4565b82525050565b6000819050919050565b6104f8816104e5565b82525050565b6000606083016000830151848203600086015261051b828261046b565b915050602083015161053060208601826104d6565b50604083015161054360408601826104ef565b508091505092915050565b600061055a83836104fe565b905092915050565b6000602082019050919050565b600061057a826103e8565b61058481856103f3565b93508360208202850161059685610404565b8060005b858110156105d257848403895281516105b3858261054e565b94506105be83610562565b925060208a0199505060018101905061059a565b50829750879550505050505092915050565b600060208201905081810360008301526105fe818461056f565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61065c8261045a565b810181811067ffffffffffffffff8211171561067b5761067a610624565b5b80604052505050565b600061068e610606565b905061069a8282610653565b919050565b600067ffffffffffffffff8211156106ba576106b9610624565b5b6106c38261045a565b9050602081019050919050565b82818337600083830152505050565b60006106f26106ed8461069f565b610684565b90508281526020810184848401111561070e5761070d61061f565b5b6107198482856106d0565b509392505050565b600082601f8301126107365761073561061a565b5b81356107468482602086016106df565b91505092915050565b60006020828403121561076557610764610610565b5b600082013567ffffffffffffffff81111561078357610782610615565b5b61078f84828501610721565b91505092915050565b6107a1816104e5565b81146107ac57600080fd5b50565b6000813590506107be81610798565b92915050565b6000602082840312156107da576107d9610610565b5b60006107e8848285016107af565b91505092915050565b600082825260208201905092915050565b600061080d82610414565b61081781856107f1565b9350610827818560208601610430565b6108308161045a565b840191505092915050565b610844816104c4565b82525050565b610853816104e5565b82525050565b600060608201905081810360008301526108738186610802565b9050610882602083018561083b565b61088f604083018461084a565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806108de57607f821691505b6020821081036108f1576108f0610897565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026109597fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261091c565b610963868361091c565b95508019841693508086168417925050509392505050565b6000819050919050565b60006109a061099b610996846104e5565b61097b565b6104e5565b9050919050565b6000819050919050565b6109ba83610985565b6109ce6109c6826109a7565b848454610929565b825550505050565b600090565b6109e36109d6565b6109ee8184846109b1565b505050565b5b81811015610a1257610a076000826109db565b6001810190506109f4565b5050565b601f821115610a5757610a28816108f7565b610a318461090c565b81016020851015610a40578190505b610a54610a4c8561090c565b8301826109f3565b50505b505050565b600082821c905092915050565b6000610a7a60001984600802610a5c565b1980831691505092915050565b6000610a938383610a69565b9150826002028217905092915050565b610aac82610414565b67ffffffffffffffff811115610ac557610ac4610624565b5b610acf82546108c6565b610ada828285610a16565b600060209050601f831160018114610b0d5760008415610afb578287015190505b610b058582610a87565b865550610b6d565b601f198416610b1b866108f7565b60005b82811015610b4357848901518255600182019150602085019450602081019050610b1e565b86831015610b605784890151610b5c601f891682610a69565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220bfbbcebc9c62c57aaa2dffd402801c95b3cd40da69bc0fd88874f4024bbd508164736f6c63430008110033",
    "linkReferences": {},
    "deployedLinkReferences": {}
  }`;
*/